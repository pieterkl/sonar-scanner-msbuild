<Project Sdk="Microsoft.NET.Sdk" InitialTargets="DownloadScannerCli">

  <PropertyGroup>
    <TargetFrameworks>$(ScannerNetFxVersion);$(ScannerNetCoreAppVersion);$(ScannerNetCoreGlobalToolVersion)</TargetFrameworks>
    <!-- OutputPath is required by the Clean and Rebuild tasks -->
    <OutputPath>bin\$(Configuration)\</OutputPath>
  </PropertyGroup>

  <PropertyGroup>
    <SonarQubeExclude>True</SonarQubeExclude>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(TargetFramework)' == '$(ScannerNetFxVersion)' ">
    <CommonFrameworkVersion>$(TargetFramework)</CommonFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(TargetFramework)' != '$(ScannerNetFxVersion)' ">
    <CommonFrameworkVersion>$(ScannerNetStandardVersion)</CommonFrameworkVersion>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Check the latest released version at https://search.maven.org/search?q=sonar-scanner-cli -->
    <!-- This version needs to be in sync with version in src/SonarScanner.MSBuild.Shim/SonarScanner.Wrapper.cs -->
    <ScannerCliVersion Condition=" $(ScannerCliVersion) == '' ">4.3.0.2102</ScannerCliVersion>
    <ScannerCliArtifact>sonar-scanner-cli-$(ScannerCliVersion).zip</ScannerCliArtifact>
    <SourcesRoot>$(MSBuildThisFileDirectory)..</SourcesRoot>
    <BuildAgentPayloadDir>$(SourcesRoot)\..\DeploymentArtifacts\BuildAgentPayload\</BuildAgentPayloadDir>
    <WorkDestinationRootDir>$(BuildAgentPayloadDir)$(Configuration)\</WorkDestinationRootDir>
    <WorkDestinationDir>$(WorkDestinationRootDir)\$(TargetFramework)</WorkDestinationDir>
    <DestinationArtifactPath>$(WorkDestinationRootDir)\sonarscanner-msbuild-$(TargetFramework).zip</DestinationArtifactPath>
    <GlobalToolNuspecDir>$(SourcesRoot)\..\nuspec\netcoreglobaltool</GlobalToolNuspecDir>
  </PropertyGroup>

  <!-- Common -->
  <ItemGroup>
    <!-- Project dependencies - ensure build order -->
    <ProjectReference Include="$(SourcesRoot)\SonarScanner.MSBuild.Common\SonarScanner.MSBuild.Common.csproj" />
    <ProjectReference Include="$(SourcesRoot)\SonarScanner.MSBuild\SonarScanner.MSBuild.csproj" />
    <ProjectReference Include="$(SourcesRoot)\SonarScanner.MSBuild.Tasks\SonarScanner.MSBuild.Tasks.csproj" />
    <ProjectReference Include="$(SourcesRoot)\SonarScanner.MSBuild.TFS\SonarScanner.MSBuild.TFS.csproj" />
    <ProjectReference Include="$(SourcesRoot)\SonarScanner.MSBuild.PostProcessor\SonarScanner.MSBuild.PostProcessor.csproj" />
    <ProjectReference Include="$(SourcesRoot)\SonarScanner.MSBuild.PreProcessor\SonarScanner.MSBuild.PreProcessor.csproj" />
    <ProjectReference Include="$(SourcesRoot)\SonarScanner.MSBuild.Shim\SonarScanner.MSBuild.Shim.csproj" />

    <!-- Targets -->
    <TargetFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.Tasks\Targets\SonarQube.Integration.targets" />
    <TargetFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.Tasks\Targets\SonarQube.Integration.ImportBefore.targets" />

    <!-- Dlls -->
    <ScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild\bin\$(Configuration)\$(TargetFramework)\SonarQube.Analysis.xml" />
    <ScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.Common\bin\$(Configuration)\$(CommonFrameworkVersion)\SonarScanner.MSBuild.Common.dll" />
    <ScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.PreProcessor\bin\$(Configuration)\$(CommonFrameworkVersion)\SonarScanner.MSBuild.PreProcessor.dll" />
    <ScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.PostProcessor\bin\$(Configuration)\$(CommonFrameworkVersion)\SonarScanner.MSBuild.PostProcessor.dll" />
    <ScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.TFS\bin\$(Configuration)\$(CommonFrameworkVersion)\SonarScanner.MSBuild.TFS.dll" />
    <ScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.Tasks\bin\$(Configuration)\$(CommonFrameworkVersion)\SonarScanner.MSBuild.Tasks.dll" />
    <ScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.Shim\bin\$(Configuration)\$(CommonFrameworkVersion)\SonarScanner.MSBuild.Shim.dll" />

    <!-- Third-parties dlls -->
    <ScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.PreProcessor\bin\$(Configuration)\$(CommonFrameworkVersion)\Newtonsoft.Json.dll" />
  </ItemGroup>

  <!-- Common debug files -->
  <ItemGroup Condition="$(Configuration) == 'Debug'">
    <ScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild\bin\$(Configuration)\$(TargetFramework)\SonarScanner.MSBuild.pdb" />
  </ItemGroup>

  <!-- NetFx specific -->
  <ItemGroup Condition=" '$(TargetFramework)' == '$(ScannerNetFxVersion)' ">
    <!-- Additional project dependencies -->
    <ProjectReference Include="$(SourcesRoot)\SonarQube.Old.Bootstrapper\SonarQube.Old.Bootstrapper.csproj" />
    <ProjectReference Include="$(SourcesRoot)\SonarQube.Bootstrapper\SonarQube.Bootstrapper.csproj" />
    <ProjectReference Include="$(SourcesRoot)\SonarScanner.MSBuild.TFS.Classic\SonarScanner.MSBuild.TFS.Classic.csproj" />

    <!-- Third-parties dlls -->
    <ScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.TFS.Classic\bin\$(Configuration)\$(ScannerNetFxVersion)\Microsoft.VisualStudio.Setup.Configuration.Interop.dll" />
	  <ScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild\bin\$(Configuration)\$(ScannerNetFxVersion)\System.Runtime.InteropServices.RuntimeInformation.dll" /> 
    <ScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild\bin\$(Configuration)\$(ScannerNetFxVersion)\System.ValueTuple.dll" />

    <!-- Entry points -->
    <ScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild\bin\$(Configuration)\$(ScannerNetFxVersion)\SonarScanner.MSBuild.exe" />
    <ScannerFiles Include="$(SourcesRoot)\SonarQube.Bootstrapper\bin\$(Configuration)\$(ScannerNetFxVersion)\SonarQube.Scanner.MSBuild.exe" />
    <ScannerFiles Include="$(SourcesRoot)\SonarQube.Old.Bootstrapper\bin\$(Configuration)\$(ScannerNetFxVersion)\MSBuild.SonarQube.Runner.exe" />

    <!-- XAML Support (only for "classic" .NET Framework). -->
    <ScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.TFS.Classic\bin\$(Configuration)\$(ScannerNetFxVersion)\SonarScanner.MSBuild.TFS.Classic.dll" />
  </ItemGroup>

  <!-- NetCore specific -->
  <ItemGroup Condition=" '$(TargetFramework)' != '$(ScannerNetFxVersion)' ">
    <!-- Entry points -->
    <ScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild\bin\$(Configuration)\$(TargetFramework)\SonarScanner.MSBuild.runtimeconfig.json" />
    <ScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild\bin\$(Configuration)\$(TargetFramework)\SonarScanner.MSBuild.dll" />
  </ItemGroup>


  <!-- Packaging Logic -->
  <UsingTask TaskName="DownloadFile" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Url ParameterType="System.String" Required="true" />
      <File ParameterType="System.String" Required="false" />
      <OutputFolder ParameterType="System.String" Required="false" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.Web" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
    using (var client = new System.Net.WebClient())
    {
        var directory = OutputFolder != null ? OutputFolder + "/" : "";
        if (!System.IO.Directory.Exists(directory))
        {
          System.IO.Directory.CreateDirectory(directory);
        }

        System.Net.ServicePointManager.SecurityProtocol = System.Net.SecurityProtocolType.Tls12;
        var fileName = File ?? System.IO.Path.GetFileName(new Uri(Url).LocalPath);
        client.DownloadFile(Url, directory + fileName);
    }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="DownloadScannerCli" Condition=" '$(TargetFramework)' == '' AND !Exists('$(BuildAgentPayloadDir)\$(ScannerCliArtifact)')">
    <PropertyGroup>
      <MavenUrlRoot>$(ARTIFACTORY_URL)</MavenUrlRoot>
      <MavenUrlRoot Condition="$(MavenUrlRoot)==''">https://repox.jfrog.io/repox</MavenUrlRoot>
      <MavenCentralUrl>$(MavenUrlRoot)/sonarsource-public-releases/org/sonarsource/scanner/cli/sonar-scanner-cli/$(ScannerCliVersion)/$(ScannerCliArtifact)</MavenCentralUrl>
    </PropertyGroup>
    
    <Message Condition="$(ARTIFACTORY_URL)==''" Importance="high" Text="Environment variable ARTIFACTORY_URL is not set. Using default value." />

    <Message Importance="high" Text="Begin downloading scanner cli version $(ScannerCliVersion)" />
    <!--DownloadFile Url="$(MavenCentralUrl)" OutputFolder="$(BuildAgentPayloadDir)" /-->
    <Message Importance="high" Text="End downloading scanner cli" />
  </Target>

  <UsingTask TaskName="ValidateZipFile" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <FullFilePath ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[    
    // Sanity check that the zip file has the expected header. This isn't a foolproof check, but
    // it does catch errors encountered previously due differences between zipping/unzipping on
    // different platforms.
        
    // See http://petlibrary.tripod.com/ZIP.HTM
    var expectedHeader = new byte[] { 0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x00, 0x08 };

    var data = System.IO.File.ReadAllBytes(FullFilePath);
    for (int i = 0; i < expectedHeader.Length; i++)
    {
        if (data[i] != expectedHeader[i])
        {
            Log.LogError("Invalid zip artifact: {0}. Unexpected value in zip header at index {1}",
              FullFilePath, i);
            return false;
        }
    }

    return true;
        ]]>
      </Code>
    </Task>
  </UsingTask>
  
  <!-- There are MS-supplied Unzip and ZipDirectory tasks.
       See https://docs.microsoft.com/en-us/visualstudio/msbuild/unzip-task?view=vs-2017
       
      However, the Zip task automatically changes forward-slashes to backslashes, which causes failures
      when the final zipped artifacts are used on non-Windows machines.
      So, we use a custom inline task that preserves any forward-slashes.
      Note: the built-in ZipDirectory task uses a compression level of "optimal". We're currently using "fastest".
-->
  <UsingTask TaskName="CustomUnzip" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <SourcePath ParameterType="System.String" Required="true" />
      <SourceFileName ParameterType="System.String" Required="true" />
      <TargetPath ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression.FileSystem" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[    
    var fullSourcePath = System.IO.Path.Combine(SourcePath, SourceFileName);
    System.IO.Compression.ZipFile.ExtractToDirectory(fullSourcePath, TargetPath);
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="CustomZipDirectory" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <SourceDirectoryPath ParameterType="System.String" Required="true" />
      <TargetFilePath ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression.FileSystem" />
      <Code Type="Class" Language="cs">
        <![CDATA[    
    public class CustomZipDirectory : Microsoft.Build.Utilities.Task
    {
        [Microsoft.Build.Framework.Required]
        public string SourceDirectoryPath { get; set; }

        [Microsoft.Build.Framework.Required]
        public string TargetFilePath { get; set; }

        private class MyEncoder : System.Text.UTF8Encoding
        {
            public MyEncoder() : base(true) { }
            public override byte[] GetBytes(string s)
            {
                // Replace backslashes with forward-slashes to make sure the zip
                // file works correctly on non-Windows platforms
                return base.GetBytes(s.Replace((char)92, (char)47));
            }
        }

        public override bool Execute()
        {
            var encoder = new MyEncoder();
            System.IO.Compression.ZipFile.CreateFromDirectory(SourceDirectoryPath,
                TargetFilePath, System.IO.Compression.CompressionLevel.Fastest, false, encoder);
            return true;
        }
    }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- Because of TargetFrameworks, the build is actually called 4 times (bootstrapping + the actual frameworks) -->
  <Target Name="CreatePayload" AfterTargets="Build" Condition=" '$(TargetFramework)' != '' ">
    <Message Importance="high" Text="Begin building artifact for scanner-msbuild $(TargetFramework)" />
    <CallTarget Targets="CleanExistingPayload" />
    <CallTarget Targets="CopyPayloadFiles" />
    <CallTarget Targets="UnzipScannerCli" />
    <CallTarget Targets="SignDlls" />
    <CallTarget Targets="SignExes" />
    <CallTarget Targets="ZipPayloadFiles" />
    <Message Importance="high" Text="End building artifact for scanner-msbuild $(TargetFramework)" />
  </Target>

  <Target Name="CleanExistingPayload" AfterTargets="Clean">
    <Message Importance="high" Text="Removing directory: $(WorkDestinationDir)" />
    <RemoveDir Directories="$(WorkDestinationDir)" />
    <Delete Files="$(DestinationArtifactPath)" />
  </Target>

  <Target Name="CopyPayloadFiles">
    <Copy SourceFiles="@(ScannerFiles)" DestinationFolder="$(WorkDestinationDir)\%(RecursiveDir)" />
    <Copy SourceFiles="@(TargetFiles)" DestinationFolder="$(WorkDestinationDir)\Targets" />
  </Target>

  <Target Name="UnzipScannerCli">
    <!--Exec Command="powershell.exe -executionpolicy bypass -command &quot;Add-Type -assembly system.io.compression.filesystem; [io.compression.zipfile]::ExtractToDirectory('$(BuildAgentPayloadDir)$(ScannerCliArtifact)', '$(WorkDestinationDir)')&quot;" /-->
  </Target>

  <Target Name="SignDlls" Condition="'$(SignAssembly)' == 'true'">
    <Exec WorkingDirectory="$(WorkDestinationDir)" Command="&quot;$(SIGNTOOL_PATH)&quot; sign /fd SHA256 /f $(PFX_PATH) /p $(PFX_PASSWORD) /tr http://timestamp.digicert.com?alg=sha256 Sonar*.dll" />
  </Target>

  <Target Name="SignExes" Condition="'$(SignAssembly)' == 'true' AND $(WorkDestinationDir.EndsWith('net46', System.StringComparison.OrdinalIgnoreCase))">
    <Exec WorkingDirectory="$(WorkDestinationDir)" Command="&quot;$(SIGNTOOL_PATH)&quot; sign /fd SHA256 /f $(PFX_PATH) /p $(PFX_PASSWORD) /tr http://timestamp.digicert.com?alg=sha256 Sonar*.exe" />
  </Target>

  <!-- Don't create the zip for netcoreapp2.1 -->
  <Target Name="ZipPayloadFiles" Condition=" '$(TargetFramework)' != 'netcoreapp2.1' AND '$(Configuration)' == 'Release' ">
    <Message Importance="high" Text="Zipping ScannerCli:" />
    <Message Importance="high" Text="  Source: $(WorkDestinationDir)" />
    <Message Importance="high" Text="  Target: $(DestinationArtifactPath)" />
    <CustomZipDirectory SourceDirectoryPath="$(WorkDestinationDir)" TargetFilePath="$(DestinationArtifactPath)" />

    <Message Importance="high" Text="Checking zip artifact '$(DestinationArtifactPath)'..." />
    <ValidateZipFile FullFilePath="$(DestinationArtifactPath)" />
    <Message Importance="high" Text="Artifact is valid." />
  </Target>
</Project>
